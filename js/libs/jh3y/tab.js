define([], function () {
	// Generated by CoffeeScript 1.6.3
	var Tab;

	Tab = function (options) {
		var extend, newTab, openEx;
		try {
			if (!(this instanceof Tab)) {
				return new Tab();
			}
		} catch (e) {
			throw Error('tab: element has already been used to create a tab.');
		}
		newTab = this;
		openEx = new RegExp('open', 'gi');
		extend = function(a, b) {
			var key;
			for (key in b) {
				if (b.hasOwnProperty(key)) {
					a[key] = b[key];
				}
			}
			return a;
		};
		Object.defineProperty(newTab, 'defaults', {
			writable: false,
			enumerable: false,
			value: {
				title: 'myTab',
				attachTo: 'body',
				content: 'this is a tab'
			}
		});
		Object.defineProperty(newTab, '_options', {
			writable: true,
			enumerable: false,
			value: extend(newTab.defaults, options)
		});
		Object.defineProperty(newTab, '_content', {
			writable: true,
			enumerable: false,
			value: newTab._options.content ? newTab._options.content : void 0
		});
		Object.defineProperty(newTab, '_title', {
			writable: true,
			enumerable: false,
			value: newTab._options.title ? newTab._options.title : void 0
		});
		Object.defineProperty(newTab, '_open', {
			writable: true,
			enumerable: false,
			value: false
		});
		Object.defineProperty(newTab, 'open', {
			enumerable: true,
			configurable: true,
			get: function() {
				return newTab._open;
			},
			set: function(open) {
				switch (open) {
					case true:
						newTab._open = open;
						return newTab.element.className = newTab.element.className + ' open';
					case false:
						newTab._open = open;
						return newTab.element.className = newTab.element.className.replace(openEx, '');
					default:
						throw Error('tab: open can only be true or false');
				}
			}
		});
		return newTab._create();
	};

	Tab.prototype._create = function() {
		var tabContent, tabTab, tabTitle;
		tab = this;
		tabTab = document.createElement('div');
		tabContent = document.createElement('div');
		tabTitle = document.createElement('div');
		tab.element = document.createElement('div');
		tab.element.className = 'tab';
		tab.element.setAttribute('data-tab', true);
		tabTab.className = 'tab-tab';
		tabTitle.innerHTML = tab._title;
		tabTitle.className = 'tab-title';
		tabTab.appendChild(tabTitle);
		tabContent.className = 'tab-content';
		if (tab._content !== undefined) {
			tabContent.innerHTML = tab._content;
		}
		tab.element.appendChild(tabContent);
		tab.element.appendChild(tabTab);
		if(tab._options.attachTo !== undefined) {
			if (typeof(tab._options.attachTo) === 'string') {
				document.querySelector(tab._options.attachTo).appendChild(tab.element);
			} else if (typeof(tab._options.attachTo === 'object')) {
				tab._options.attachTo.appendChild(tab.element);
			}
		}
		return tabTab.addEventListener('click', function() {
			return tab.open = tab.open ? false : true;
		});
	};
	return Tab;	
})
